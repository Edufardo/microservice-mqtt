import { EmailerConfig } from '@moontech-industry/moontech-backend-library/emailer/emailer-config';
import { Module } from '@nestjs/common';
import { AgvsModule } from '../libs/moontech-backend-library/src/agvs/agvs.module';
import { AlertsModule } from '../libs/moontech-backend-library/src/alerts/alerts.module';
import { AuthModule } from '../libs/moontech-backend-library/src/auth/auth.module';
import { CrossesModule } from '../libs/moontech-backend-library/src/crosses/crosses.module';
import { EmailerModule } from '../libs/moontech-backend-library/src/emailer/emailer.module';
import { LoggerModule } from '../libs/moontech-backend-library/src/logger/logger.module';
import { MongoDbConfig } from '../libs/moontech-backend-library/src/mongo-db/mongo-db-config';
import { MongoDbModule } from '../libs/moontech-backend-library/src/mongo-db/mongo-db.module';
import { PermissionModule } from '../libs/moontech-backend-library/src/permissions/permissions.module';
import { PopulateModule } from '../libs/moontech-backend-library/src/populate/populate.module';
import { RoleModule } from '../libs/moontech-backend-library/src/roles/role.module';
import { StationsModule } from '../libs/moontech-backend-library/src/stations/stations.module';
import { UsersModule } from '../libs/moontech-backend-library/src/users/users.module';
import { WebsocketModule } from '../libs/moontech-backend-library/src/websocket/websocket.module';
import { OrdersModule } from './../libs/moontech-backend-library/src/orders/orders.module';

const mongoDB: MongoDbConfig = {
  ip: 'localhost',
  port: 27017,
  database: 'testing-library',
};

//TODO:Maybe move this config options to some environment file?
const emailerConfig: EmailerConfig = {
  // Sending email Address configuration
  sending_Email_Address: 'moontech.notifications.service@gmail.com',
  sending_Email_Password: 'TAC2kpnrDFUaC3dvMcoQ',
};

@Module({
  imports: [
    /*
    PlcOpcuaConnectionModule.register({
      ip: '10.5.16.199',
      port: '4840'
    }),
    */
    WebsocketModule.register({
      port: 8070,
    }),
    MongoDbModule.register(mongoDB),
    PermissionModule,
    RoleModule,
    UsersModule,
    AuthModule,
    StationsModule,
    LoggerModule,
    PopulateModule,
    CrossesModule,
    AgvsModule,
    OrdersModule.register({
      historic: true,
      finished: true,
    }),
    AlertsModule,
    EmailerModule.register(emailerConfig),
  ],
  controllers: [],
  providers: [],
})
export class AppModule {}
