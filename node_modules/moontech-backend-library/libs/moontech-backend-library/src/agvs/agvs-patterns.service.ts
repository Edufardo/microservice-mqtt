import { Injectable } from '@nestjs/common';
import { MessagePattern } from '@nestjs/microservices';
import { MicroserviceConnectionService } from '../microservice-connection/microservice-connection.service';
import { IAgv } from '../models-mongo/agv.model';
import { AGV_PATTERNS } from './agv.patterns';
import { AgvNetworkDto } from './dto/agvNetwork.dto';
import { EditAgvNetworkDto } from './dto/editAgvNetwork.dto';

@Injectable()
export class AgvsPatternsService {

    constructor(private microservice: MicroserviceConnectionService){}

    @MessagePattern(AGV_PATTERNS.MESSAGES_HANDLERS.GET_AGVS)
    async fetchAllAgvs() {
        this.microservice.getConnectionToBackend();
        return this.microservice.getClient().send(AGV_PATTERNS.MESSAGES_HANDLERS.GET_AGVS, {}).toPromise();
    }
  
    @MessagePattern(AGV_PATTERNS.MESSAGES_HANDLERS.CREATE_AGV)
    async createAgv(newAgv: AgvNetworkDto): Promise<IAgv> {
        this.microservice.getConnectionToBackend();
        return this.microservice.getClient().send(AGV_PATTERNS.MESSAGES_HANDLERS.CREATE_AGV, {newAgv}).toPromise();
    }
  
    @MessagePattern(AGV_PATTERNS.MESSAGES_HANDLERS.UPDATE_AGV)
    async updateAgv(agvId: string, agv: EditAgvNetworkDto): Promise<IAgv> {
        this.microservice.getConnectionToBackend();
        return this.microservice.getClient().send(AGV_PATTERNS.MESSAGES_HANDLERS.UPDATE_AGV, {agvId, agv}).toPromise();
    }
  
    @MessagePattern(AGV_PATTERNS.MESSAGES_HANDLERS.CHANGE_STATE)
    async changeAgvState(agvId: string): Promise<IAgv> {
        this.microservice.getConnectionToBackend();
        return  this.microservice.getClient().send(AGV_PATTERNS.MESSAGES_HANDLERS.CHANGE_STATE, {agvId}).toPromise();
    }
  
    @MessagePattern(AGV_PATTERNS.MESSAGES_HANDLERS.DELETE_AGV)
    async deleteAgv(agvId: string): Promise<IAgv> {
        this.microservice.getConnectionToBackend();
        return this.microservice.getClient().send(AGV_PATTERNS.MESSAGES_HANDLERS.DELETE_AGV, {agvId}).toPromise();
    }

}
