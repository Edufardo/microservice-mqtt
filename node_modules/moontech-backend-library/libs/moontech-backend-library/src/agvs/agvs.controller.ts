import { Body, Controller, Delete, Get, Inject, Param, Post, Put, UseGuards, ValidationPipe } from '@nestjs/common';
import { EventPattern } from '@nestjs/microservices';
import { AuthGuard } from '@nestjs/passport';
import { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';
import { IAgv } from '../models-mongo/agv.model';
import { WS_AGVS } from '../websocket/constants/websocketEvents';
import { WebsocketGateway } from '../websocket/websocket.gateway';
import { AGV_PATTERNS } from './agv.patterns';
import { AgvsPatternsService } from './agvs-patterns.service';
import { AgvsService } from './agvs.service';
import { AgvNetworkDto } from './dto/agvNetwork.dto';
import { EditAgvNetworkDto } from './dto/editAgvNetwork.dto';

@Controller('api/v1/agvs')
@ApiTags('agvs')
export class AgvsController {

    constructor(
      @Inject('SERVICE') private agvsService: AgvsService | AgvsPatternsService,
      private websocketService: WebsocketGateway
    ){}

    @Get()
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
      summary: 'Fetch all agvs. AuthGuard Required',
    })
    fetchAllAgvs(): Promise<AgvNetworkDto[]> {
      return this.agvsService.fetchAllAgvs();
    }
    
    @Post()
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
      summary: 'Creates a new agv. AuthGuard Required',
    })
    createAgv(@Body(ValidationPipe) newAgv: AgvNetworkDto): Promise<AgvNetworkDto> {
      return this.agvsService.createAgv(newAgv);
    }

    @Delete('/:agvId')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
      summary: 'Deletes an agv. AuthGuard Required',
    })
    deleteAgv(@Param('agvId') agvId: string): Promise<IAgv> {
      return this.agvsService.deleteAgv(agvId);
    }

    @Put('/:agvId')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
      summary: 'Updates data from an agv. AuthGuard Required',
    })
    updateAgv(
      @Param('agvId') agvId: string,
      @Body(ValidationPipe) agv: EditAgvNetworkDto,
    ): Promise<IAgv> {
      return this.agvsService.updateAgv(agvId, agv);
    }

    @Put('/state/:agvId')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
      summary: 'Updates data from an agv. AuthGuard Required',
    })
    changeAgvState(
      @Param('agvId') agvId: string,
    ): Promise<IAgv> {
      return this.agvsService.changeAgvState(agvId);
    }

    @EventPattern(AGV_PATTERNS.EVENTS_HANDLERS.WS_AGVS)
    notifyWebsockets(data: { agvs: AgvNetworkDto[] }){
        console.log("Recibo datos desde evento para actualizar ");
        this.websocketService.sendMessageBroadcast(WS_AGVS, data.agvs);
    }
  
}
