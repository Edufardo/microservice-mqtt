import { Controller } from '@nestjs/common';
import { MessagePattern } from '@nestjs/microservices';
import { MicroserviceConnectionService } from '../microservice-connection/microservice-connection.service';
import { IAgv } from '../models-mongo/agv.model';
import { AGV_PATTERNS } from './agv.patterns';
import { AgvsService } from './agvs.service';
import { AgvNetworkDto } from './dto/agvNetwork.dto';
import { EditAgvNetworkDto } from './dto/editAgvNetwork.dto';

@Controller()
export class AgvsPatternsController {

    
    constructor(
        private crossesService: AgvsService,
        private microservice: MicroserviceConnectionService
    ){ }

    @MessagePattern(AGV_PATTERNS.MESSAGES_HANDLERS.GET_AGVS)
    fetchAllAgvs() {
      return this.crossesService.fetchAllAgvs();
    }

    @MessagePattern(AGV_PATTERNS.MESSAGES_HANDLERS.CREATE_AGV)
    async createAgv(data: { newAgv: AgvNetworkDto }): Promise<AgvNetworkDto> {
        const agv: IAgv = await this.crossesService.createAgv(data.newAgv);
        if(agv){
            this.notifyWebsockets();
        }
        return agv;
    }

    @MessagePattern(AGV_PATTERNS.MESSAGES_HANDLERS.UPDATE_AGV)
    async updateAgv(data: { agvId: string, agv: EditAgvNetworkDto }): Promise<IAgv> {
        const agv: IAgv = await this.crossesService.updateAgv(data.agvId, data.agv);
        if(agv){
            this.notifyWebsockets();
        }
        return agv;
    }

    @MessagePattern(AGV_PATTERNS.MESSAGES_HANDLERS.CHANGE_STATE)
    async changeAgvState(data: { agvId: string }): Promise<IAgv> {
        const agv: IAgv = await this.crossesService.changeAgvState(data.agvId);
        if(agv){
            this.notifyWebsockets();
        }
        return agv;
    }

    @MessagePattern(AGV_PATTERNS.MESSAGES_HANDLERS.DELETE_AGV)
    async deleteCross(data: { agvId: string }): Promise<IAgv> {
        const agv: IAgv = await this.crossesService.deleteAgv(data.agvId);
        if(agv){
            this.notifyWebsockets();
        }
        return agv;
    }

    async notifyWebsockets(){

        try {
            let agvs = await this.fetchAllAgvs();
    
            this.microservice.getConnectionToBackend();
            this.microservice.getClient().emit(AGV_PATTERNS.EVENTS_HANDLERS.WS_AGVS, {agvs}).toPromise();
        } catch (err) {
          console.error('[Websocket] Emit error - buffer free');
          console.error(err);
        }
    
      }


}
