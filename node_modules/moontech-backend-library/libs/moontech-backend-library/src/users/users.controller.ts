import {
  Body,
  Controller,
  Delete,
  Get,
  Param,
  Post,
  Put,
  UseGuards,
  ValidationPipe,
} from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';
import { IUser } from '../models-mongo/user.model';
import { EditUserDto } from './dto/editUser.dto';
import { UserDto } from './dto/user.dto';
import { UsersService } from './users.service';

@Controller(`api/v1/users`)
@ApiTags('users')
export class UsersController {

  constructor(private usersService: UsersService) {}

  // Create New User in DB
  @Post()
  @UseGuards(AuthGuard())
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({
    summary: 'Creates a new user. AuthGuard Required',
  })
  createUser(@Body(ValidationPipe) newUser: UserDto): Promise<UserDto> {
    return this.usersService.createUser(newUser);
  }

  // Delete existing User from DB
  @Delete('/:userCode')
  @UseGuards(AuthGuard())
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({
    summary: 'Deletes a user. AuthGuard Required',
  })
  deleteUser(@Param('userCode') userCode: string): Promise<UserDto> {
    return this.usersService.deleteUser(userCode);
  }

  @Put('/:userCode')
  @UseGuards(AuthGuard())
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({
    summary: 'Updates data from a user. AuthGuard Required',
  })
  updateUser(
    @Param('userCode') userCode: string,
    @Body(ValidationPipe) user: EditUserDto,
  ): Promise<IUser> {
    return this.usersService.updateUser(userCode, user);
  }

  @Get()
  @UseGuards(AuthGuard())
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({
    summary: 'Get all users. AuthGuard Required',
  })
  fetchAllUsers() {
    return this.usersService.fetchAllUsers();
  }
}
