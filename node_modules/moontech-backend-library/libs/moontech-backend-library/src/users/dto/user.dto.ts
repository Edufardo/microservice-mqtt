import { RoleDto } from '../../roles/dto/role.dto';
import { ApiProperty } from '@nestjs/swagger';
import {
  IsArray,
  IsNotEmpty,
  IsString,
  Matches,
  MaxLength,
  MinLength,
} from 'class-validator';
export class UserDto {
  @ApiProperty()
  @IsString()
  @MinLength(4)
  @MaxLength(20)
  userCode: string;

  @ApiProperty()
  @IsString()
  @MinLength(8)
  @MaxLength(20)
  @Matches(/((?=.*\d)|(?=.*\W+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {
    message: 'Password too weak.',
  }) // at least one upper case, at least one lower case, at least one number or special character
  password: string;

  @ApiProperty()
  @IsString()
  @IsNotEmpty()
  @Matches(
    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/,
    { message: 'Email format invalid' },
  )
  email: string;

  @ApiProperty()
  @IsNotEmpty()
  role: RoleDto;

  constructor(userCode: string, email: string, role: RoleDto) {
    this.userCode = userCode;
    this.email = email;
    this.role = role;
  }
}
