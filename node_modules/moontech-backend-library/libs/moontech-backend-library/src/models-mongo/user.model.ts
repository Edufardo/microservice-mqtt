import * as bcrypt from 'bcrypt';
import * as mongoose from 'mongoose';
import { Document } from 'mongoose';
import { IRole, roleSchema } from './role.model';
export interface IUser extends Document {
  userCode: string;
  password: string;
  email: string;
  role: IRole;
  comparePassword: (password: string) => Promise<boolean>;
}

export const userSchema = new mongoose.Schema<IUser>(
  {
    userCode: { type: String, required: true, unique: true, lowercase: true },
    password: { type: String, required: true },
    email: {
      type: String,
      unique: true,
      required: true,
      lowercase: true,
      trim: true,
    },
    role: { type: mongoose.Schema.Types.ObjectId, ref: 'Role', required: true}
  },
  {
    timestamps: true,
  },
);

// Function that runs before saving in db(For create and update users)

userSchema.pre<IUser>('save', async function (next): Promise<void> {
  const user = this;
  if (!user.isModified('password')) return next();
  const salt = await bcrypt.genSalt(10);
  const hash = await bcrypt.hash(user.password, salt);
  user.password = hash;
  next();
  return undefined;
});

// Check if password matches the one stored in db

userSchema.methods.comparePassword = async function (
  password: string,
): Promise<boolean> {
  const equal = await bcrypt.compare(password, this.password);
  return equal;
};
