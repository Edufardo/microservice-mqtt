import * as mongoose from 'mongoose';
import { Document } from 'mongoose';
import { StationDto } from '../stations/dto/station.dto';
import { IStation } from './station.model';

export interface IDestination {
  destination: number; // Number of tag destination
  completed: boolean; // If destination has been reached
  completedAt?: Date; // Date when destination reached
  checkpoint: boolean; // True if destination is a checkpoint of the order (carro cogido)
}

export const destinationsSchema = new mongoose.Schema<IDestination>({
  destination: { type: Number, unique: false, required: true },
  completed: { type: Boolean, required: true, default: false },
  completedAt: { type: Date, required: false, default: null },
  checkpoint: { type: Boolean, required: true, default: false },
});

export interface IOrder extends Document {
  id: string;
  type: string;
  description?: string;
  insertedAt?: Date;
  confirmAt?: Date;
  finishAt?: Date;
  trafficReadAt?: Date;
  trafficStartedAt?: Date;
  trafficFinishedAt?: Date;
  manual?: boolean;
  agvId?: string;
  priority?: number;
  origin: IStation;
  destination?: IStation;
  destinations?: IDestination[];
  orderRelated?: IOrder;
  extension?: any;
}

export const orderSchema = new mongoose.Schema<IOrder>(
  {
    id: { type: String, required: true, unique: true },
    type: { type: String, required: true },
    description: { type: String, default: null },
    insertedAt: { type: Date, default: null },
    confirmAt: { type: Date, default: null },
    finishAt: { type: Date, default: null },
    trafficReadAt: { type: Date, default: null },
    trafficStartedAt: { type: Date, default: null },
    trafficFinishedAt: { type: Date, default: null },
    manual: { type: Boolean, default: false },
    agvId: { type: String, default: null },
    priority: { type: Number, default: 1 },
    origin: { type: mongoose.Schema.Types.ObjectId, ref: 'Station', required: true, default: null },
    destination: { type: mongoose.Schema.Types.ObjectId, ref: 'Station', default: null },
    destinations: { type: [destinationsSchema], default: null },
    orderRelated: { type: mongoose.Schema.Types.ObjectId, ref: 'Order', default: null},
    extension: { type: mongoose.Schema.Types.Mixed, default: null}
  }
);

export const orderHistoricSchema = new mongoose.Schema<IOrder>(
  {
    id: { type: String, required: true },
    type: { type: String, required: true },
    description: { type: String, default: null },
    insertedAt: { type: Date, default: null },
    confirmAt: { type: Date, default: null },
    finishAt: { type: Date, default: null },
    trafficReadAt: { type: Date, default: null },
    trafficStartedAt: { type: Date, default: null },
    trafficFinishedAt: { type: Date, default: null },
    manual: { type: Boolean, default: false },
    agvId: { type: String, default: null },
    priority: { type: Number, default: 1 },
    origin: { type: mongoose.Schema.Types.ObjectId, ref: 'Station', required: true, default: null },
    destination: { type: mongoose.Schema.Types.ObjectId, ref: 'Station', default: null },
    destinations: { type: [destinationsSchema], default: null },
    orderRelated: { type: mongoose.Schema.Types.ObjectId, ref: 'Order', default: null},
    extension: { type: mongoose.Schema.Types.Mixed, default: null}
  },
  {
    timestamps: true
  }
);
