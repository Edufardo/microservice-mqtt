import { Body, Controller, Delete, Get, Param, Post, Put, UseGuards, ValidationPipe } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';
import { StationDto } from './dto/station.dto';
import { StationsService } from './stations.service';

@Controller(`api/v1/stations`)
@ApiTags('stations')
export class StationsController {

    constructor(private stationsService: StationsService) {}
    
    @Get()
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
        summary:
        'Get all stations. BasicAuth Required',
    })
    getStations(): Promise<StationDto[]> {
        return this.stationsService.getStations();
    }

    @Get('status/:status')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
        summary:
        'Get all stations by status. BasicAuth Required',
    })
    getStationsByStatus(@Param('status') status: string): Promise<StationDto[]> {
        return this.stationsService.getStationsByStatus(status);
    }

    @Post()
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
        summary:
        'Create a station. BasicAuth Required',
    })
    createStation(@Body(ValidationPipe) station: StationDto): Promise<StationDto> {
        return this.stationsService.createStation(station);
    }

    @Put()
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
        summary:
        'Update a station. Search old station by name. BasicAuth Required',
    })
    updateStation(@Body(ValidationPipe) station: StationDto): Promise<StationDto> {
        return this.stationsService.updateStation(station);
    }
    
    @Put('/free/:name')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
        summary:
        'Free a station. BasicAuth Required',
    })
    freeStation(@Param('name') name: string): Promise<boolean> {
        return this.stationsService.freeStation(name);
    }

    @Put('/occupy/:name')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
        summary:
        'Occupy a station. BasicAuth Required',
    })
    occupyStation(@Param('name') name: string): Promise<boolean> {
        return this.stationsService.occupyStation(name);
    }

    @Put('/:id')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
        summary:
        'Update a station by id of station (mongo). BasicAuth Required',
    })
    updateStationById(@Body(ValidationPipe) station: StationDto, @Param('id') id: string): Promise<StationDto> {
        return this.stationsService.updateStationById(station, id);
    }

    @Delete('/:name')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
        summary:
        'Delete a station. BasicAuth Required',
    })
    deleteStation(@Param('name') name: string): Promise<StationDto> {
        return this.stationsService.deleteStation(name);
    }


}
