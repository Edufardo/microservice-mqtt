import { Body, Controller, Delete, Get, Param, Post, Put, UseGuards, ValidationPipe } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';
import { PermissionDto } from '..';
import { OrderDto } from './dto/order.dto';
import { OrdersService } from './orders.service';

@Controller(`api/v1/orders`)
@ApiTags('orders')
export class OrdersController {

    constructor(private orderService: OrdersService){}

    @Get()
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    fetchAllOrders() {
      return this.orderService.fetchAllOrders();
    }

    @Get('pending')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
        summary: 'Get all pending orders',
    })
    getPendingOrders() {
      return this.orderService.getPendingOrders();
    }

    @Get('confirmed')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
        summary: 'Get all confirmed orders',
    })
    getConfirmedOrders() {
        return this.orderService.getConfirmedOrders();
    }

    @Get('current')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
        summary: 'Get all current orders',
    })
    getInCourseOrders() {
        return this.orderService.getCurrentOrders();
    }

    @Get('finished')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
        summary: 'Get all orders finished',
    })
    getFinishedOrders() {
        return this.orderService.getFinishedOrders();
    }

    @Get('type/:type')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
        summary: 'Get all orders finished',
    })
    getOrdersByType(@Param('type') type: string) {
        return this.orderService.getOrdersByType(type);
    }

    
    @Get('historic')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
        summary: 'Get all orders has versions',
    })
    fetchHistoricOrders() {
      return this.orderService.fetchHistoricOrders();
    }
    
    @Post()
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth') 
    @ApiOperation({
        summary: 'Create a new order',
    })
    createNewOrder(@Body(ValidationPipe) newOrder: OrderDto): Promise<OrderDto> {
        return this.orderService.createNewOrder(newOrder);
    }

    @Put(':id')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth') 
    @ApiOperation({
        summary: 'Update an order',
    })
    updateOrder(@Param('id') id: string, @Body(ValidationPipe) order: OrderDto): Promise<OrderDto> {
        return this.orderService.updateOrder(id, order);
    }

    @Put('cancel/:id')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth') 
    @ApiOperation({
        summary:
        'Cancels an order in course, and reverses it to its previous state before being confirmed',
    })
    cancelOrder(@Param('id') id: string): Promise<OrderDto> {
        return this.orderService.cancelOrder(id);
    }
    
    @Put('confirm/:id')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth') 
    @ApiOperation({
        summary: 'Confirm a order',
    })
    confirmOrder(@Param('id') id: string): Promise<OrderDto> {
        return this.orderService.confirmOrder(id);
    }

    @Put('finish/:id')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth') 
    @ApiOperation({
        summary: 'Confirm a order',
    })
    finishOrder(@Param('id') id: string): Promise<OrderDto> {
        return this.orderService.finishOrder(id);
    }

    @Delete(':id')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth') 
    @ApiOperation({
        summary:
        'Cancels an order in course, and reverses it to its previous state before being confirmed',
    })
    deleteOrder(@Param('id') id: string): Promise<OrderDto> {
        return this.orderService.deleteOrder(id);
    }
}
