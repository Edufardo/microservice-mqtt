import { Inject, Injectable, OnApplicationBootstrap } from '@nestjs/common';
import { ClientProxy, ClientProxyFactory, Transport } from '@nestjs/microservices';
import { MicroserviceConnectionConfig } from './microservice-connection-config';

@Injectable()
export class MicroserviceConnectionService implements OnApplicationBootstrap {
  private client: ClientProxy;

  constructor(@Inject('CONFIG_OPTIONS') private options: MicroserviceConnectionConfig) { 

    console.log("OPTIONS: ", this.options);
    
    this.client = ClientProxyFactory.create(
        {
            transport: Transport.TCP,
            options: {
              host: this.options.host,
              port: this.options.port,
            },
        },
    );

  }

  async onApplicationBootstrap() {
    this.getConnectionToBackend();
  }

  getClient(){
    return this.client;
  }

  async getConnectionToBackend() {
    try {
      await this.client.connect();
      console.log("CONEXION CORRECTA");
    } catch (error) {
      const errorText = error.message;
      //console.log(errorText);
      if (errorText.includes('ECONNREFUSED')) {
        console.log('CONEXIÓN RECHAZADA POR EL BACKEND');
      } else if (errorText.includes('EADDRINUSE')) {
        console.log('EL PUERTO YA ESTÁ EN USO EN EL SISTEMA POR OTRO PROCESO');
      } else {
        console.log(errorText);
      }
    }
  }
  
}
