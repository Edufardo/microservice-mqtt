import { Body, Controller, Delete, Get, Param, Post, Put, UseGuards, ValidationPipe } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';
import { RoleDto } from './dto/role.dto';
import { RoleService } from './role.service';

@Controller(`api/v1/roles`)
@ApiTags('roles')
export class RoleController {

    constructor(private roleService: RoleService) {}
    
    @Get()
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
        summary:
        'Get all roles. BasicAuth Required',
    })
    getRoles(): Promise<RoleDto[]> {
        return this.roleService.getRoles();
    }

    @Post()
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
        summary:
        'Create a role. BasicAuth Required',
    })
    createStation(@Body(ValidationPipe) newRole: RoleDto): Promise<RoleDto> {
        return this.roleService.createRole(newRole);
    }

    @Put('/:oldRole')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
        summary:
        'Update a role. Search old role by name. BasicAuth Required',
    })
    updateStation(@Param('oldRole') oldRole: string, @Body(ValidationPipe) newRole: RoleDto): Promise<RoleDto> {
        return this.roleService.updateRole(oldRole, newRole);
    }

    @Delete('/:name')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
        summary:
        'Delete a role. BasicAuth Required',
    })
    deleteStation(@Param('name') name: string): Promise<RoleDto> {
        return this.roleService.deleteRole(name);
    }


}
