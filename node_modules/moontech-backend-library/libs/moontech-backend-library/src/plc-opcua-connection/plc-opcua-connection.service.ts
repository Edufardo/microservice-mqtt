import { Inject, ServiceUnavailableException } from '@nestjs/common';
import {
  OPCUAClient,
  ClientSession,
  ClientSubscription,
  AttributeIds,
  MonitoringParametersOptions,
  ClientMonitoredItem,
  TimestampsToReturn,
  DataValue,
  ReadValueId,
  NodeId,
  ReadValueIdOptions,
} from 'node-opcua-client';
import { NodeOperationsService } from '../node-operations/node-operations.service';
import {
  CONECTION_SUCCESSFUL,
  GLOBAL_ERROR,
  SESSION_SUCCESSFUL,
  trafficClient,
  TrafficConnectionError,
} from './plc-opcua-connection.constants';

export class PlcOpcuaConnectionService {
  private client: OPCUAClient = null;
  private session: ClientSession = null;
  subscriptionCrosses = null;

  private endpointUrl: string;

  constructor(
    @Inject('CONFIG_OPTIONS') private options, 
    private readonly nodeOperationsService: NodeOperationsService
  ) {
    this.client = trafficClient;
    this.endpointUrl = 'opc.tcp://'+options.ip+':'+ options.port;
    this.createConnection();
  }

  async timeout(ms: number) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  public getSession(): ClientSession {
    return this.session;
  }
  public existsSession(): boolean {
    return this.session != null;
  }

  //Creates a connection with the PLC
  public async createConnectionAndSession() {
    try {
      // step 1 : connect to
      await this.client.connect(this.endpointUrl);
      console.log(CONECTION_SUCCESSFUL);

      // step 2 : createSession
      this.session = await this.client.createSession();
      console.log(SESSION_SUCCESSFUL);
    } catch (err) {
      console.log(GLOBAL_ERROR, err);
    }
  }

  // Creates connection and session
  public async createConnection(): Promise<void> {
    try {
      // step 1 : connect to
      await this.client.connect(this.endpointUrl);
      console.log(CONECTION_SUCCESSFUL);
      // step 2 : createSession
      this.session = await this.client.createSession();
      console.log(SESSION_SUCCESSFUL);
    } catch (error) {
      console.log('Traffic PLC unavailable');
      // throw new TrafficConnectionError("Service unavailable");
    }
    //******************************************************************************* */
    // this.subscribeFunction()
  }

  public async createSession(): Promise<ClientSession> {
    // step 2 : createSession
    this.session = await this.client.createSession();
    console.log(SESSION_SUCCESSFUL);
    return this.session;
  }

  public async closeSession() {
    // close session
    await this.session.close();
    console.log('session closed !');
  }

  public async closeConnection() {
    // disconnecting
    await this.client.disconnect();
    console.log('Disconnected!');
  }
}
