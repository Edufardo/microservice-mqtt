import { ConflictException, Injectable } from '@nestjs/common';
import { Model } from 'mongoose';
import { TYPEALERT } from '../common/typeAlert';
import { alertsSchema, IAlert } from '../models-mongo/alert.model';
import { MongoDbService } from '../mongo-db/mongo-db.service';
import { WebsocketGateway } from '../websocket/websocket.gateway';
import { AlertDto } from './dto/alert.dto';

@Injectable()
export class AlertsService {
  private AlertModel: Model<IAlert>;

  constructor(
    private readonly mongoDb: MongoDbService,
    private readonly websocketService: WebsocketGateway,
  ) {
    this.AlertModel = this.mongoDb
      .getConnection()
      .model<IAlert>('Alert', alertsSchema, 'alerts');
  }

  async populate() {
    const alerts: AlertDto[] = [
      {
        type: TYPEALERT.AGV,
        description: 'Alerta 1',
        date: new Date(),
        read: true,
      },
      {
        type: TYPEALERT.CROSS,
        description: 'Alerta 2',
        date: new Date(),
        read: false,
      },
      {
        type: TYPEALERT.GENERAL,
        description: 'Alerta 3',
        date: new Date(),
        read: false,
      },
    ];

    for (const a of alerts) {
      const alert = await this.findAlert(a.id);
      if (!alert) {
        await this.createAlert(a);
      }
    }
  }

  async findAlert(id: number): Promise<IAlert> {
    const alert = await this.AlertModel.findOne({ id: id });
    return alert;
  }

  async createAlert(alert: AlertDto): Promise<AlertDto> {
    
    const newAlert = new this.AlertModel({
      type: alert.type,
      description: alert.description
    });

    try {
      await newAlert.save();

      console.log('[createAlert] New alert created: ', newAlert);

      // this.notifyWebsockets();

      return newAlert;
    } catch (error) {
      console.log('[createAlert] ', error);
      throw new Error(error);
    }
  }

  async getAlerts(): Promise<AlertDto[]> {
    try {
        const alerts: IAlert[] = await this.AlertModel.find()
        return alerts as AlertDto[]
    } catch (error) {
        console.log('[getAlerts] Cant find alerts', error)
        throw new ConflictException('[getAlerts] Cant find alerts', error)
    }
  }

  async unreadAlerts():Promise<AlertDto[]>{
    const unreadAlerts: AlertDto[] = await this.AlertModel.find({ read: false })
    return unreadAlerts
  }

  async readAlert(id:number){
    const alert: IAlert = await this.findAlert(id);
    if (alert){
      alert.read = !alert.read
      await alert.updateOne({
        id: alert.id,
        read: alert.read,
        type: alert.type,
        description: alert.description
      })
    }
    return alert
  }

  async deleteAllAlerts(){
    const rows = await this.AlertModel.deleteMany();
    return rows.deletedCount > 0;
  }

  async deleteAlertById(id: number){
    const rows = await this.AlertModel.deleteOne({ id: id })
    return rows.deletedCount > 0;
  }
}
