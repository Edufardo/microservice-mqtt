import { Body, Controller, Delete, Get, Param, Put, UseGuards } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';
import { AlertsService } from './alerts.service';
import { AlertDto } from './dto/alert.dto';

@Controller('api/v1/alerts')
@ApiTags('alerts')
export class AlertsController {
  
  constructor(private alertsService: AlertsService) {}

  @Get()
  @UseGuards(AuthGuard())
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({
    summary: 'Get all alerts. BasicAuth Required',
  })
  fetchAllAlerts(): Promise<AlertDto[]> {
    return this.alertsService.getAlerts();
  }

  @Get('/unread')
  @UseGuards(AuthGuard())
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({
    summary: 'Get unread alerts. BasicAuth Required',
  })
  getUnreadAlerts(): Promise<AlertDto[]> {
    return this.alertsService.unreadAlerts();
  }

  @Get('/:id')
  @UseGuards(AuthGuard())
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({
    summary: 'Get alert by ID. BasicAuth Required',
  })
  getAlert(@Param('id') id: number): Promise<AlertDto> {
    return this.alertsService.findAlert(id);
  }

  @Put('state/:id')
  @UseGuards(AuthGuard())
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({
    summary: 'Read an alert. BasicAuth Required',
  })
  readAlert(@Param('id') id: number){
    return this.alertsService.readAlert(id)
  }

  @Delete()
  @UseGuards(AuthGuard())
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({
    summary: 'Delete all alerts. BasicAuth Required',
  })
  deleteAlerts(){
    return this.alertsService.deleteAllAlerts()
  }

  @Delete(':id')
  @UseGuards(AuthGuard())
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({
    summary: 'Delete alert by id. BasicAuth Required',
  })
  deleteAlertById(@Param('id') id:number){
    return this.alertsService.deleteAlertById(id)
  }
}

