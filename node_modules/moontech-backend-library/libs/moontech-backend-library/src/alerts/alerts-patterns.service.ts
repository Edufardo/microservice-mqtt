import { Injectable } from '@nestjs/common';
import { MessagePattern } from '@nestjs/microservices';
import { MicroserviceConnectionService } from '../microservice-connection/microservice-connection.service';
import { ALERTS_PATTERNS } from './alert-patterns';
import { AlertDto } from './dto/alert.dto';

@Injectable()
export class AlertsPatternsService {
/*
    constructor(private microservice: MicroserviceConnectionService){}

    @MessagePattern(ALERTS_PATTERNS.MESSAGES_HANDLERS.GET_ALERTS)
    async getAlerts() {
        this.microservice.getConnectionToBackend();
        return await this.microservice.getClient().send(ALERTS_PATTERNS.MESSAGES_HANDLERS.GET_ALERTS, {}).toPromise();
    }
  
    @MessagePattern(ALERTS_PATTERNS.MESSAGES_HANDLERS.GET_ALERTS_UNREAD)
    async getUnreadAlerts() {
        this.microservice.getConnectionToBackend();
        return await this.microservice.getClient().send(ALERTS_PATTERNS.MESSAGES_HANDLERS.GET_ALERTS_UNREAD, {}).toPromise();
    }
  
    @MessagePattern(ALERTS_PATTERNS.MESSAGES_HANDLERS.READ_ALERT)
    async readAlert(id: number): Promise<AlertDto> {
        this.microservice.getConnectionToBackend();
        return await this.microservice.getClient().send(ALERTS_PATTERNS.MESSAGES_HANDLERS.READ_ALERT, {id}).toPromise();
    }
  
    @MessagePattern(ALERTS_PATTERNS.MESSAGES_HANDLERS.DELETE_ALERT)
    async deleteAlerts(): Promise<Boolean> {
        this.microservice.getConnectionToBackend();
        return await this.microservice.getClient().send(ALERTS_PATTERNS.MESSAGES_HANDLERS.DELETE_ALERT, {}).toPromise();
    }
  
    @MessagePattern(ALERTS_PATTERNS.MESSAGES_HANDLERS.DELETE_ALERT)
    async deleteAgv(agvId: string): Promise<IAgv> {
        this.microservice.getConnectionToBackend();
        return await this.microservice.getClient().send(AGV_PATTERNS.MESSAGES_HANDLERS.DELETE_AGV, {agvId}).toPromise();
    }
*/

}
