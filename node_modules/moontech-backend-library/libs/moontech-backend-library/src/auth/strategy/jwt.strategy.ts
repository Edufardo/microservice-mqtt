import { Injectable, UnauthorizedException } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';
import { IUser } from '../../models-mongo/user.model';
import { UsersService } from '../../users/users.service';
import { Strategy, ExtractJwt } from 'passport-jwt';
import { JwtPayload } from '../interfaces/jwt-payload.interface';

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor(private readonly usersService: UsersService) {
    super({
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      // Passport is going to use it to verify the signature of the token that is extracted from the request
      // If if is not valid it will throw an error
      secretOrKey: 'topSecret51', // WIP - We need to pass this via Environment variables
    });
  }

  // If the signature is valid,is going to call this validate method with the payload.
  // At the end whatever we return is going to be injected into the request of every operation that is guarded with the authentication.
  async validate(payload: JwtPayload): Promise<IUser> {
    const { userCode } = payload;
    // Retrieve the user based on the userCode
    const user = await this.usersService.findUser(userCode);
    //console.log('----->' + user);
    if (!user) {
      throw new UnauthorizedException();
    }

    return user;
  }
}
