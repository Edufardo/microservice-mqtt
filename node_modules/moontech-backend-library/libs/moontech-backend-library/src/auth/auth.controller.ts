import {
  Body,
  Controller,
  Get,
  Post,
  Req,
  UseGuards,
  ValidationPipe,
} from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import { ApiCreatedResponse, ApiOperation, ApiTags } from '@nestjs/swagger';
import { UsersService } from '../users/users.service';
import { AuthService } from './auth.service';
import { AuthCredentialsDto } from './dto/auth-credentials.dto';
import { Token } from './dto/token.dto';

@Controller(`api/v1/auth`)
@ApiTags('auth')
export class AuthController {
  
  constructor(
    private authService: AuthService
  ) {}

  @Post('/login')
  @ApiOperation({
    summary: 'Sign in with credentials',
  })
  @ApiCreatedResponse({
    description: 'Succesfully logged in.',
    type: Token,
  })
  signIn(
    @Body(ValidationPipe) authCredentialsDto: AuthCredentialsDto,
  ): Promise<{ accessToken: string }> {
    return this.authService.logIn(authCredentialsDto);
  }

  // WIP - Guard the endpoint only for specific Roles/Admins
  // Delete existing User from DB
  @Get('user-data')
  @UseGuards(AuthGuard())
  @ApiOperation({
    summary: 'Fetch User Data. AuthGuard Required',
  })
  fetchUser(@Req() request: any) {
    return this.authService.fetchUserData(request.user.userCode);
  }
}
