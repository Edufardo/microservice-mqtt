import { Body, Controller, Delete, Get, Inject, Param, Post, Put, UseGuards, ValidationPipe } from '@nestjs/common';
import { EventPattern } from '@nestjs/microservices';
import { AuthGuard } from '@nestjs/passport';
import { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';
import { ICross } from '../models-mongo/cross.model';
import { WS_CROSSES } from '../websocket/constants/websocketEvents';
import { WebsocketGateway } from '../websocket/websocket.gateway';
import { CrossePatternService } from './crosses-patterns.service';
import { CROSSES_PATTERNS } from './crosses.patterns';
import { CrossesService } from './crosses.service';
import { Cross } from './dto/crosses.dto';

@Controller('api/v1/crosses')
@ApiTags('crosses')
export class CrossesController {

    constructor(
      @Inject('SERVICE') private crossesService: CrossesService | CrossePatternService,
      private websocketService: WebsocketGateway
    ){ }

    @Get()
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
      summary: 'Get all crosses. AuthGuard Required',
    })
    fetchCrosses() {
      return this.crossesService.fetchCrosses();
    }

    @Post()
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
        summary: 'Creates a new cross. AuthGuard Required'
    })
    createCross(@Body(ValidationPipe) newCross: Cross): Promise<Cross> {
        return this.crossesService.createCross(newCross);
    }

    @Put('/:crossId')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
      summary: 'Update a cross. AuthGuard Required'
    })
    updateCross(@Param('crossId') crossId: string, @Body(ValidationPipe) newCross: Cross ): Promise<ICross>{
      return this.crossesService.updateCross(crossId, newCross)
    }

    @Put('free/:crossId')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
      summary: 'Free a cross. AuthGuard Required'
    })
    freeCross(@Param('crossId') crossId: string): Promise<ICross>{
      return this.crossesService.freeCross(crossId)
    }

    @Delete('/:crossId')
    @UseGuards(AuthGuard())
    @ApiBearerAuth('JWT-auth')
    @ApiOperation({
      summary: 'Delete a cross. AuthGuard Required'
    })
    deleteCross(@Param('crossId') crossId: string): Promise<ICross>{
      return this.crossesService.deleteCross(crossId)
    }

    @EventPattern(CROSSES_PATTERNS.EVENTS_HANDLERS.WS_CROSSES)
    notifyWebsockets(data: { crosses: Cross[] }){
        console.log("Recibo datos desde evento para actualizar ");
        this.websocketService.sendMessageBroadcast(WS_CROSSES, data.crosses);
    }

}
