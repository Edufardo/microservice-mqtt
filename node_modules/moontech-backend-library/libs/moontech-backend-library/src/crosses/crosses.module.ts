import { DynamicModule, Module } from '@nestjs/common';
import { PassportModule } from '@nestjs/passport';
import { CrossesConfig } from './crosses-config';
import { CrossesPatternsController } from './crosses-patterns.controller';
import { CrossePatternService } from './crosses-patterns.service';
import { CrossesController } from './crosses.controller';
import { CrossesService } from './crosses.service';

@Module({
  imports: [],
  controllers: [],
  providers: [],
  exports: []
})
export class CrossesModule {
  static register(options?: CrossesConfig): DynamicModule {
    
    const dynamicModule: DynamicModule = {
      module: CrossesModule,
    }
    if(options.endpoints && !options.patterns){
      dynamicModule.imports = [
        PassportModule.register({ defaultStrategy: 'jwt' })
      ];
      dynamicModule.controllers = [
        CrossesController
      ]; 
      dynamicModule.providers = [
        {
          provide: 'CONFIG_OPTIONS',
          useValue: options,
        },
        {
          provide: 'SERVICE',
          useClass: CrossesService,
          inject: [CrossesService]
        },
        CrossesService
      ];
      dynamicModule.exports = [
        CrossesService
      ];
    }else if (options.endpoints && options.patterns){
      dynamicModule.imports = [
        PassportModule.register({ defaultStrategy: 'jwt' })
      ];
      dynamicModule.controllers = [
        CrossesController
      ];
      dynamicModule.providers = [
        {
          provide: 'CONFIG_OPTIONS',
          useValue: options,
        },
        {
          provide: 'SERVICE',
          useClass: CrossePatternService,
          inject: [CrossePatternService]
        },
        CrossePatternService
      ];
      dynamicModule.exports = [
        CrossePatternService
      ];
    } else if(!options.endpoints && options.patterns) {
      dynamicModule.controllers = [
        CrossesPatternsController
      ]; 
      dynamicModule.providers = [
        {
          provide: 'CONFIG_OPTIONS',
          useValue: options,
        },
        CrossesService,
      ];
      dynamicModule.exports = [
        CrossesService
      ];
    }

    return dynamicModule;
  }
}
