import { Controller } from '@nestjs/common';
import { MessagePattern } from '@nestjs/microservices';
import { MicroserviceConnectionService } from '../microservice-connection/microservice-connection.service';
import { ICross } from '../models-mongo/cross.model';
import { CROSSES_PATTERNS } from './crosses.patterns';
import { CrossesService } from './crosses.service';
import { Cross } from './dto/crosses.dto';

@Controller()
export class CrossesPatternsController {

    constructor(
        private crossesService: CrossesService,
        private microService: MicroserviceConnectionService
      ){ }

    @MessagePattern(CROSSES_PATTERNS.MESSAGES_HANDLERS.GET_CROSSES)
    fetchCrossesPattern() {
      return this.crossesService.fetchCrosses();
    }

    @MessagePattern(CROSSES_PATTERNS.MESSAGES_HANDLERS.CREATE_CROSS)
    async createCrossPattern(data: { newCross: Cross }): Promise<Cross> {
        const cross: ICross = await this.crossesService.createCross(data.newCross);
        if(cross){
            this.notifyWebsockets();
        }
        return cross;
    }

    @MessagePattern(CROSSES_PATTERNS.MESSAGES_HANDLERS.UPDATE_CROSS)
    async updateCross(data: { crossId: string, newCross: Cross}): Promise<Cross> {
        const cross: ICross = await this.crossesService.updateCross(data.crossId, data.newCross);
        if(cross){
            this.notifyWebsockets();
        }
        return cross;
    }

    @MessagePattern(CROSSES_PATTERNS.MESSAGES_HANDLERS.FREE_CROSS)
    async freeCross(data: { crossId: string }): Promise<Cross> {
        const cross: ICross = await this.crossesService.freeCross(data.crossId);
        if(cross){
            this.notifyWebsockets();
        }
        return cross;
    }

    @MessagePattern(CROSSES_PATTERNS.MESSAGES_HANDLERS.DELETE_CROSS)
    async deleteCross(data: { crossId: string }): Promise<Cross> {
        const cross: ICross = await this.crossesService.deleteCross(data.crossId);
        if(cross){
            this.notifyWebsockets();
        }
        return cross;
    }

    async notifyWebsockets(){

        try {
            let crosses = await this.crossesService.fetchCrosses();
            this.microService.getConnectionToBackend();
            this.microService.getClient().emit(CROSSES_PATTERNS.EVENTS_HANDLERS.WS_CROSSES, {crosses}).toPromise();
        } catch (err) {
            console.error('[Websocket] Emit error - buffer free');
            console.error(err);
        }

    }

}
