import { Injectable } from '@nestjs/common';
import { MicroserviceConnectionService } from '../microservice-connection/microservice-connection.service';
import { CROSSES_PATTERNS } from './crosses.patterns';
import { Cross } from './dto/crosses.dto';

@Injectable()
export class CrossePatternService {

    constructor(private microService: MicroserviceConnectionService){}

    async fetchCrosses() {
        this.microService.getConnectionToBackend();
        return this.microService.getClient().send(CROSSES_PATTERNS.MESSAGES_HANDLERS.GET_CROSSES, {}).toPromise();
    }

    async createCross(newCross: Cross){
        this.microService.getConnectionToBackend();
        return this.microService.getClient().send(CROSSES_PATTERNS.MESSAGES_HANDLERS.CREATE_CROSS, {newCross}).toPromise();
    }

    async updateCross(crossId: string, newCross: Cross){
        this.microService.getConnectionToBackend();
        return this.microService.getClient().send(CROSSES_PATTERNS.MESSAGES_HANDLERS.UPDATE_CROSS, {crossId, newCross}).toPromise();
    }

    async freeCross(crossId: string){
        this.microService.getConnectionToBackend();
        return this.microService.getClient().send(CROSSES_PATTERNS.MESSAGES_HANDLERS.FREE_CROSS, { crossId }).toPromise();
    }

    async deleteCross(crossId: string){
        this.microService.getConnectionToBackend();
        return this.microService.getClient().send(CROSSES_PATTERNS.MESSAGES_HANDLERS.DELETE_CROSS, { crossId }).toPromise();
    }


}
