import { Inject, Injectable, Logger } from '@nestjs/common';
import {
  MessageBody,
  OnGatewayInit,
  SubscribeMessage,
  WebSocketGateway,
  WebSocketServer
} from '@nestjs/websockets';
import { bgGreen, bgRed } from 'chalk';
import { Socket } from 'dgram';
import { Server } from 'http';
import { WebsocketConfig } from './websocket-config';

@Injectable()
@WebSocketGateway()
export class WebsocketGateway implements OnGatewayInit {
  
  constructor(@Inject('CONFIG_OPTIONS') private options: WebsocketConfig) { }

  @WebSocketServer() server: Server;
  private logger: Logger = new Logger(`socket`);

  /**
   * Executed when init
   * @param server
   */
  async afterInit(server: Server) {
    this.server = await server.listen(this.options.port);
    console.log(bgGreen('Websocket started on port: ' + this.options.port));
  }

  /**
   * This function executes when client disconnects
   * @param client The client who disconnects. Could be @ConnectedSocket() client: Socket
   */
  handleDisconnect(client: Socket) {
    console.log(
      bgRed('Client disconnected: ', client['handshake'].headers.origin),
    );
  }

  /**
   * This function executes when client connects
   * @param client The client who connects. Could be @ConnectedSocket() client: Socket
   */
  async handleConnection(client: Socket) {
    console.log(
      bgGreen('Client connected: ', client['handshake'].headers.origin),
    );
  }

  sendMessageBroadcast(message: string, data?: any) {
    data == null ? this.server.emit(message) : this.server.emit(message, data);
  }

}
