import {
  Body,
  Controller,
  Delete,
  Get,
  Param,
  Post,
  Put,
  UseGuards,
  ValidationPipe,
} from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import { PermissionService } from './permissions.service';
import { PermissionDto } from './dto/permission.dto';
import { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';

@Controller('/api/v1/permissions')
@ApiTags('permissions')
export class PermissionController {
  constructor(private permissionService: PermissionService) {}

  @Post()
  @UseGuards(AuthGuard())
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({
    summary: 'Create a new permission',
  })
  createPermission(@Body(ValidationPipe) newPermission: PermissionDto): Promise<PermissionDto> {
    return this.permissionService.createNewPermission(newPermission);
  }

  @Delete('/:permissionName')
  @UseGuards(AuthGuard())
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({
    summary: 'Delete a permission',
  })
  deletePermission(@Param('permissionName') permissionName: string): Promise<void> {
    return this.permissionService.deletePermission(permissionName);
  }

  @Put('/:permissionName')
  @UseGuards(AuthGuard())
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({
    summary: 'Update a permission',
  })
  updatePermission(
    @Param('permissionName') permissionName: string,
    @Body(ValidationPipe) permission: PermissionDto,
  ): Promise<void> {
    return this.permissionService.updatePermission(permissionName, permission);
  }

  @Get()
  @UseGuards(AuthGuard())
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({
    summary: 'Get all permissions',
  })
  fetchAllPermissions() {
    return this.permissionService.fetchAllPermissions();
  }
}
