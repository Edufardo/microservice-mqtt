"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlcOpcuaConnectionService = void 0;
const common_1 = require("@nestjs/common");
const node_operations_service_1 = require("../node-operations/node-operations.service");
const plc_opcua_connection_constants_1 = require("./plc-opcua-connection.constants");
let PlcOpcuaConnectionService = class PlcOpcuaConnectionService {
    constructor(options, nodeOperationsService) {
        this.options = options;
        this.nodeOperationsService = nodeOperationsService;
        this.client = null;
        this.session = null;
        this.subscriptionCrosses = null;
        this.client = plc_opcua_connection_constants_1.trafficClient;
        this.endpointUrl = 'opc.tcp://' + options.ip + ':' + options.port;
        this.createConnection();
    }
    async timeout(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
    }
    getSession() {
        return this.session;
    }
    existsSession() {
        return this.session != null;
    }
    async createConnectionAndSession() {
        try {
            await this.client.connect(this.endpointUrl);
            console.log(plc_opcua_connection_constants_1.CONECTION_SUCCESSFUL);
            this.session = await this.client.createSession();
            console.log(plc_opcua_connection_constants_1.SESSION_SUCCESSFUL);
        }
        catch (err) {
            console.log(plc_opcua_connection_constants_1.GLOBAL_ERROR, err);
        }
    }
    async createConnection() {
        try {
            await this.client.connect(this.endpointUrl);
            console.log(plc_opcua_connection_constants_1.CONECTION_SUCCESSFUL);
            this.session = await this.client.createSession();
            console.log(plc_opcua_connection_constants_1.SESSION_SUCCESSFUL);
        }
        catch (error) {
            console.log('Traffic PLC unavailable');
        }
    }
    async createSession() {
        this.session = await this.client.createSession();
        console.log(plc_opcua_connection_constants_1.SESSION_SUCCESSFUL);
        return this.session;
    }
    async closeSession() {
        await this.session.close();
        console.log('session closed !');
    }
    async closeConnection() {
        await this.client.disconnect();
        console.log('Disconnected!');
    }
};
PlcOpcuaConnectionService = __decorate([
    __param(0, (0, common_1.Inject)('CONFIG_OPTIONS')),
    __metadata("design:paramtypes", [Object, node_operations_service_1.NodeOperationsService])
], PlcOpcuaConnectionService);
exports.PlcOpcuaConnectionService = PlcOpcuaConnectionService;
//# sourceMappingURL=plc-opcua-connection.service.js.map