"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrossesService = void 0;
const common_1 = require("@nestjs/common");
const cross_model_1 = require("../models-mongo/cross.model");
const mongo_db_service_1 = require("../mongo-db/mongo-db.service");
const websocketEvents_1 = require("../websocket/constants/websocketEvents");
const websocket_gateway_1 = require("../websocket/websocket.gateway");
let CrossesService = class CrossesService {
    constructor(mongoDb, websocketService) {
        this.mongoDb = mongoDb;
        this.websocketService = websocketService;
        this.CrossModel = this.mongoDb
            .getConnection()
            .model('Crosses', cross_model_1.crossSchema, 'crosses');
    }
    async findCross(crossId) {
        return await this.CrossModel.findOne({ crossId });
    }
    async fetchCrosses() {
        try {
            let crosses = await this.CrossModel.find();
            return crosses;
        }
        catch (error) {
            console.error("[fetchCrosses] ", error);
            throw new Error(error);
        }
    }
    async createCross(newCross) {
        let { crossId, occupied, waiting, agvId, description, blockingTags, liberationTags } = newCross;
        let cross = new this.CrossModel({
            crossId,
            occupied,
            waiting,
            agvId,
            description,
            blockingTags,
            liberationTags
        });
        let crossExist = await this.findCross(crossId);
        if (crossExist) {
            console.error("[createCross] Cross already exists.");
            throw new common_1.ConflictException('Cross already exists.');
        }
        else {
            try {
                cross.save();
                console.log('[createCross] Cross created: ', cross);
                this.notifyWebsockets();
                return cross;
            }
            catch (err) {
                console.error("[createCross] ", err);
                throw new Error(err);
            }
        }
    }
    async updateCross(crossId, newCross) {
        let cross = await this.findCross(crossId);
        if (cross) {
            await cross.updateOne({
                crossId: newCross.crossId,
                occupied: newCross.occupied,
                waiting: newCross.waiting,
                agvId: newCross.agvId,
                description: newCross.description,
                blockingTags: newCross.blockingTags,
                liberationTags: newCross.liberationTags,
            });
            const crossUpdate = await this.findCross(newCross.crossId);
            console.log("[updateCross] Cross updated: ", crossUpdate);
            this.notifyWebsockets();
            return crossUpdate;
        }
        else {
            console.error("[updateCross] Cross not found.");
            throw new common_1.ConflictException('Cross not found.');
        }
    }
    async deleteCross(crossId) {
        let cross = await this.findCross(crossId);
        if (cross) {
            cross.delete();
            console.error("[deleteCross] Cross " + crossId + " deleted.");
            this.notifyWebsockets();
            return cross;
        }
        else {
            console.error("[deleteCross] Cross not found.");
            throw new common_1.ConflictException('Cross not found.');
        }
    }
    async notifyWebsockets() {
        try {
            let crosses = await this.fetchCrosses();
            this.websocketService.sendMessageBroadcast(websocketEvents_1.WS_CROSSES, crosses);
        }
        catch (err) {
            console.error('[Websocket] Emit error - buffer free');
            console.error(err);
        }
    }
};
CrossesService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [mongo_db_service_1.MongoDbService,
        websocket_gateway_1.WebsocketGateway])
], CrossesService);
exports.CrossesService = CrossesService;
//# sourceMappingURL=crosses.service.js.map