"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionService = void 0;
const common_1 = require("@nestjs/common");
const mongo_db_service_1 = require("../mongo-db/mongo-db.service");
const permission_model_1 = require("../models-mongo/permission.model");
const websocket_gateway_1 = require("../websocket/websocket.gateway");
const websocketEvents_1 = require("../websocket/constants/websocketEvents");
let PermissionService = class PermissionService {
    constructor(mongoDb, websocketService) {
        this.mongoDb = mongoDb;
        this.websocketService = websocketService;
        this.PermissionModel = this.mongoDb
            .getConnection()
            .model('Permission', permission_model_1.permissionSchema, 'permissions');
    }
    async populate() {
        const permissions = [
            "CREATE",
            "UPDATE",
            "READ",
            "DELETE",
            "CREATE_USER",
            "READ_USER",
            "UPDATE_USER",
            "DELETE_USER",
            "CREATE_ROLE",
            "READ_ROLE",
            "UPDATE_ROLE",
            "DELETE_ROLE",
            "CREATE_PERMISSION",
            "READ_PERMISSION",
            "UPDATE_PERMISSION",
            "DELETE_PERMISSION"
        ];
        for (const p of permissions) {
            const permission = await this.findPermission(p);
            if (!permission) {
                const newPermission = new this.PermissionModel({
                    permissionName: p,
                });
                await this.createNewPermission(newPermission);
            }
        }
    }
    async createNewPermission(newPermission) {
        const permission = new this.PermissionModel({
            permissionName: newPermission.permissionName,
        });
        try {
            await permission.save();
            console.log("[createNewPermission] Create new permission: ", permission);
            return permission;
        }
        catch (error) {
            if ((error.code = 11000)) {
                for (const [key, value] of Object.entries(error === null || error === void 0 ? void 0 : error.keyValue)) {
                    throw new common_1.ConflictException("[createNewPermission] " + key + ' already exists (' + value + ')');
                }
            }
            else {
                console.log("[createNewPermission] ", error);
                throw new Error(error);
            }
        }
    }
    async deletePermission(permissionName) {
        try {
            const permission = await this.PermissionModel.findOne({ permissionName });
            if (permission) {
                permission.delete();
                console.log('[deletePermission] Role ' + permission + ' deleted.');
            }
            else {
                console.log('[deletePermission] Role ' + permissionName + ' not found.');
            }
        }
        catch (error) {
            console.log("[deletePermission] ", error);
            throw new Error(error);
        }
    }
    async updatePermission(permissionName, newPermission) {
        const existingPermission = await this.findPermission(permissionName);
        if (existingPermission)
            try {
                Object.assign(existingPermission, newPermission);
                await existingPermission.save();
                console.log('[updatePermission] Role ' + permissionName + ' updated to ' + newPermission.permissionName);
            }
            catch (error) {
                console.log("[updatePermission] ", error);
                throw new Error(error);
            }
        else {
            console.log("[updatePermission] Role " + permissionName + " not found.");
            throw new common_1.ConflictException('Role ' + permissionName + ' not found.');
        }
    }
    async findPermission(permissionName) {
        try {
            const permission = await this.PermissionModel.findOne({ permissionName });
            return permission;
        }
        catch (error) {
            console.log(error);
        }
        return null;
    }
    async fetchAllPermissions() {
        try {
            const permissions = await this.PermissionModel.find();
            return permissions;
        }
        catch (error) {
            console.log("[fetchAllPermissions] ", error);
        }
        return null;
    }
    async notifyWebsockets() {
        try {
            let permissions = await this.fetchAllPermissions();
            this.websocketService.sendMessageBroadcast(websocketEvents_1.WS_PERMISSIONS, permissions);
        }
        catch (err) {
            console.error('[Websocket] Emit error - buffer free');
            console.error(err);
        }
    }
};
PermissionService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [mongo_db_service_1.MongoDbService,
        websocket_gateway_1.WebsocketGateway])
], PermissionService);
exports.PermissionService = PermissionService;
//# sourceMappingURL=permissions.service.js.map