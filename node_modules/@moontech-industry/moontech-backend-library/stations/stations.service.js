"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StationsService = void 0;
const common_1 = require("@nestjs/common");
const status_1 = require("../common/status");
const station_model_1 = require("../models-mongo/station.model");
const mongo_db_service_1 = require("../mongo-db/mongo-db.service");
const websocketEvents_1 = require("../websocket/constants/websocketEvents");
const websocket_gateway_1 = require("../websocket/websocket.gateway");
let StationsService = class StationsService {
    constructor(mongoDb, websocketService) {
        this.mongoDb = mongoDb;
        this.websocketService = websocketService;
        this.StationModel = this.mongoDb
            .getConnection()
            .model('Station', station_model_1.stationSchema, 'stations');
    }
    async getStations() {
        try {
            let stations = await this.StationModel.find();
            console.log("[getStations] Stations: ", stations);
            return stations;
        }
        catch (error) {
            console.log("[getStations] ", error);
            throw new Error(error);
        }
    }
    async createStation(station) {
        const existsStation = await this.find(station.name);
        if (existsStation) {
            console.log("[createStation] Station already exists");
            throw new common_1.ConflictException('Station already exists.');
        }
        const newStation = new this.StationModel(Object.assign({}, station));
        try {
            await newStation.save();
            console.log("[createStation] New station created: ", station);
            this.notifyWebsockets();
            return newStation;
        }
        catch (error) {
            console.error('[createStation] ', error);
            throw new Error(error);
        }
    }
    async updateStation(station) {
        const stationOriginal = await this.find(station.name);
        if (stationOriginal) {
            await stationOriginal.updateOne({
                coords: station.coords,
                status: station.status
            });
            const stationUpdate = await this.find(station.name);
            console.log("[createStation] Station updated: ", station);
            this.notifyWebsockets();
            return stationUpdate;
        }
        else {
            console.log('[updateStation] Station not found.');
            throw new common_1.ConflictException('Station not found.');
        }
    }
    async updateStationById(station, id) {
        const stationOriginal = await this.findById(id);
        if (stationOriginal) {
            await stationOriginal.updateOne({
                name: station.name,
                coords: station.coords,
                status: station.status
            });
            console.log("[updateStationById] Station updated: ", station);
            this.notifyWebsockets();
            return stationOriginal;
        }
        else {
            console.error('[updateStationById] Station not found.');
            throw new common_1.ConflictException('Station not found.');
        }
    }
    async deleteStation(name) {
        const station = await this.find(name);
        if (station) {
            await station.delete();
            console.log("[deleteStation] Station deleted: ", station);
            this.notifyWebsockets();
            return station;
        }
        else {
            console.error('[deleteStation] Station not found.');
            throw new common_1.ConflictException('Station not found.');
        }
    }
    async freeStation(name) {
        const station = await this.find(name);
        if (station) {
            station.status = status_1.STATUS.FREE;
            await this.updateStation(station);
            console.log("[freeStation] Station has been freed: ", station);
            this.notifyWebsockets();
            return true;
        }
        else {
            console.error('[freeStation] Station not found.');
            return false;
        }
    }
    async occupyStation(name) {
        const station = await this.find(name);
        if (station) {
            station.status = status_1.STATUS.OCCUPIED;
            await this.updateStation(station);
            console.log("[occupyStation] Station has been occupied: ", station);
            this.notifyWebsockets();
            return true;
        }
        else {
            console.error('[occupyStation] Station not found.');
            return false;
        }
    }
    async find(name) {
        const station = await this.StationModel.findOne({ name });
        return station;
    }
    async findById(id) {
        const station = await this.StationModel.findOne({ _id: id });
        return station;
    }
    async notifyWebsockets() {
        try {
            let stations = await this.getStations();
            this.websocketService.sendMessageBroadcast(websocketEvents_1.WS_STATIONS, stations);
        }
        catch (err) {
            console.error('[Websocket] Emit error - buffer free');
            console.error(err);
        }
    }
};
StationsService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [mongo_db_service_1.MongoDbService,
        websocket_gateway_1.WebsocketGateway])
], StationsService);
exports.StationsService = StationsService;
//# sourceMappingURL=stations.service.js.map