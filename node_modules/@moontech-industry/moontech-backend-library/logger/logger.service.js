"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggerService = void 0;
const winston_1 = require("winston");
require("winston-daily-rotate-file");
class LoggerService {
    constructor() {
        const myFormat = winston_1.format.printf((info) => {
            return `${info.timestamp} - ${info.message}`;
        });
        this.MyCustomLogger = (0, winston_1.createLogger)({
            format: winston_1.format.combine(winston_1.format.timestamp({
                format: 'YYYY-MM-DD HH:mm:ss',
            }), myFormat),
            transports: [
                new winston_1.transports.DailyRotateFile({
                    filename: 'log/connection/connection-%DATE%.log',
                    datePattern: 'YYYY-MM-DD',
                    level: 'info',
                }),
            ],
        });
        this.logger = (0, winston_1.createLogger)({
            format: winston_1.format.combine(winston_1.format.timestamp({
                format: 'YYYY-MM-DD HH:mm:ss',
            }), myFormat),
            transports: [
                new winston_1.transports.DailyRotateFile({
                    filename: 'log/errors/error-%DATE%.log',
                    datePattern: 'YYYY-MM-DD',
                    level: 'error',
                }),
                new winston_1.transports.DailyRotateFile({
                    filename: 'log/all/all-%DATE%.log',
                    datePattern: 'YYYY-MM-DD',
                }),
                new winston_1.transports.DailyRotateFile({
                    filename: 'log/info/info-%DATE%.log',
                    datePattern: 'YYYY-MM-DD',
                    level: 'info',
                }),
                new winston_1.transports.Console(),
            ],
        });
        console.log = (message, params) => {
            if (params) {
                this.logger.info(message + " " + JSON.stringify(params));
            }
            else {
                this.logger.info(message);
            }
        };
        console.error = (message, params) => {
            if (params) {
                this.logger.info(message + " " + JSON.stringify(params));
            }
            else {
                this.logger.info(message);
            }
        };
    }
    logConnection(message, trace) {
        this.MyCustomLogger.info(message);
    }
    log(message) {
        this.logger.info(message);
    }
    error(message, trace) {
        this.logger.error(message, trace);
    }
    warn(message) {
        this.logger.warning(message);
    }
    debug(message) {
        this.logger.debug(message);
    }
    verbose(message) {
        this.logger.verbose(message);
    }
}
exports.LoggerService = LoggerService;
//# sourceMappingURL=logger.service.js.map