"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.userSchema = void 0;
const bcrypt = require("bcrypt");
const mongoose = require("mongoose");
exports.userSchema = new mongoose.Schema({
    userCode: { type: String, required: true, unique: true, lowercase: true },
    password: { type: String, required: true },
    email: {
        type: String,
        unique: true,
        required: true,
        lowercase: true,
        trim: true,
    },
    role: { type: mongoose.Schema.Types.ObjectId, ref: 'Role', required: true }
}, {
    timestamps: true,
});
exports.userSchema.pre('save', async function (next) {
    const user = this;
    if (!user.isModified('password'))
        return next();
    const salt = await bcrypt.genSalt(10);
    const hash = await bcrypt.hash(user.password, salt);
    user.password = hash;
    next();
    return undefined;
});
exports.userSchema.methods.comparePassword = async function (password) {
    const equal = await bcrypt.compare(password, this.password);
    return equal;
};
//# sourceMappingURL=user.model.js.map