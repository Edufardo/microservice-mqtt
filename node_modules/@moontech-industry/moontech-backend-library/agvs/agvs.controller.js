"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgvsController = void 0;
const common_1 = require("@nestjs/common");
const passport_1 = require("@nestjs/passport");
const swagger_1 = require("@nestjs/swagger");
const agvs_service_1 = require("./agvs.service");
const agvNetwork_dto_1 = require("./dto/agvNetwork.dto");
const editAgvNetwork_dto_1 = require("./dto/editAgvNetwork.dto");
let AgvsController = class AgvsController {
    constructor(agvsService) {
        this.agvsService = agvsService;
    }
    createAgv(newAgv) {
        return this.agvsService.createAgv(newAgv);
    }
    deleteAgv(agvId) {
        return this.agvsService.deleteAgv(agvId);
    }
    updateAgv(agvId, agv) {
        return this.agvsService.updateAgv(agvId, agv);
    }
    fetchAllUsers() {
        return this.agvsService.fetchAllAgvs();
    }
};
__decorate([
    (0, common_1.Post)(),
    (0, common_1.UseGuards)((0, passport_1.AuthGuard)()),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiOperation)({
        summary: 'Creates a new agv. AuthGuard Required',
    }),
    __param(0, (0, common_1.Body)(common_1.ValidationPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [agvNetwork_dto_1.AgvNetworkDto]),
    __metadata("design:returntype", Promise)
], AgvsController.prototype, "createAgv", null);
__decorate([
    (0, common_1.Delete)('/:agvId'),
    (0, common_1.UseGuards)((0, passport_1.AuthGuard)()),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiOperation)({
        summary: 'Deletes an agv. AuthGuard Required',
    }),
    __param(0, (0, common_1.Param)('agvId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], AgvsController.prototype, "deleteAgv", null);
__decorate([
    (0, common_1.Put)('/:agvId'),
    (0, common_1.UseGuards)((0, passport_1.AuthGuard)()),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiOperation)({
        summary: 'Updates data from an agv. AuthGuard Required',
    }),
    __param(0, (0, common_1.Param)('agvId')),
    __param(1, (0, common_1.Body)(common_1.ValidationPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, editAgvNetwork_dto_1.EditAgvNetworkDto]),
    __metadata("design:returntype", Promise)
], AgvsController.prototype, "updateAgv", null);
__decorate([
    (0, common_1.Get)(),
    (0, common_1.UseGuards)((0, passport_1.AuthGuard)()),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiOperation)({
        summary: 'Get all agvs. AuthGuard Required',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], AgvsController.prototype, "fetchAllUsers", null);
AgvsController = __decorate([
    (0, common_1.Controller)('api/v1/agvs'),
    (0, swagger_1.ApiTags)('agvs'),
    __metadata("design:paramtypes", [agvs_service_1.AgvsService])
], AgvsController);
exports.AgvsController = AgvsController;
//# sourceMappingURL=agvs.controller.js.map