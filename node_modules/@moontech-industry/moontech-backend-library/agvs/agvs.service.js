"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgvsService = void 0;
const common_1 = require("@nestjs/common");
const agv_model_1 = require("../models-mongo/agv.model");
const mongo_db_service_1 = require("../mongo-db/mongo-db.service");
const websocketEvents_1 = require("../websocket/constants/websocketEvents");
const websocket_gateway_1 = require("../websocket/websocket.gateway");
let AgvsService = class AgvsService {
    constructor(mongoDb, websocketService) {
        this.mongoDb = mongoDb;
        this.websocketService = websocketService;
        this.AgvModel = this.mongoDb
            .getConnection()
            .model('Agvs', agv_model_1.agvsSchema, 'agvs');
    }
    async findAgv(agvId) {
        const agv = await this.AgvModel.findOne({ id: agvId });
        return agv;
    }
    async createAgv(newAgv) {
        const { id, ip, active } = newAgv;
        const agvExists = await this.findAgv(id);
        if (agvExists) {
            console.log("[createAgv] Agv already exists.");
            throw new common_1.ConflictException('Agv already exists.');
        }
        const agv = new this.AgvModel({
            id,
            ip,
            active
        });
        try {
            await agv.save();
            console.log("[createAgv] Created new agv: ", agv);
            this.notifyWebsockets();
            return agv;
        }
        catch (error) {
            console.log("[createAgv] ", error);
            throw new Error(error);
        }
    }
    async updateAgv(agvId, newAgv) {
        const agv = await this.findAgv(agvId);
        if (agv) {
            await agv.updateOne({
                id: newAgv.id,
                ip: newAgv.ip,
                active: newAgv.active
            });
            console.log('[updateAgv] Agv ' + agvId + ' updated: ');
            this.notifyWebsockets();
            return agv;
        }
        else {
            console.log('[updateAgv] Agv ' + agvId + ' not found.');
            throw new common_1.ConflictException('[updateAgv] Agv not found.');
        }
    }
    async deleteAgv(agvId) {
        const agv = await this.findAgv(agvId);
        if (agv) {
            agv.delete();
            console.log('[deleteAgv] Agv ' + agvId + ' deleted.');
            this.notifyWebsockets();
            return agv;
        }
        else {
            console.log('[deleteAgv] Agv ' + agvId + ' not found.');
            throw new common_1.ConflictException('Agv not found.');
        }
    }
    async fetchAllAgvs() {
        try {
            let agvs = await this.AgvModel.find();
            return agvs;
        }
        catch (error) {
            console.log("[fetchAllAgvs] ", error);
        }
    }
    async notifyWebsockets() {
        try {
            let agvs = await this.fetchAllAgvs();
            this.websocketService.sendMessageBroadcast(websocketEvents_1.WS_AGVS, agvs);
        }
        catch (err) {
            console.error('[Websocket] Emit error - buffer free');
            console.error(err);
        }
    }
};
AgvsService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [mongo_db_service_1.MongoDbService,
        websocket_gateway_1.WebsocketGateway])
], AgvsService);
exports.AgvsService = AgvsService;
//# sourceMappingURL=agvs.service.js.map